{"version":3,"sources":["serviceWorker.js","components/Todo.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Todo","items","currentIteam","text","key","handleInput","bind","AddIteam","DeleteItems","setUpdate","e","this","setState","target","value","Date","now","preventDefault","newiteam","newIteams","fliterItems","filter","two","map","item","className","style","color","fontSize","fontFamily","textAlign","scrollamount","direction","behavior","onSubmit","display","flexWrap","type","placeholder","onChange","Button","variant","onClick","height","marginTop","Listiteams","React","Component","props","listData","one","boxShadow","id","border","marginLeft","duration","easing","App","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ef090e67.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport '../App.css';\n\nimport FlipMove from \"react-flip-move\";\nimport Button from '@material-ui/core/Button';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\n\n\nclass Todo extends React.Component{\n  constructor(){\n    super()\n    this.state={\n      items:[],\n      currentIteam:{\n        text:'',\n        key:''\n      }\n    }\n    this.handleInput=this.handleInput.bind(this)\n    this.AddIteam=this.AddIteam.bind(this)\n    this.DeleteItems=this.DeleteItems.bind(this)\n    this.setUpdate=this.setUpdate.bind(this)\n\n\n  }\n  handleInput(e){\n    this.setState({\n      currentIteam:{\n        text:e.target.value,\n        key:Date.now()\n      }\n    })\n  }\n  AddIteam(e){\n    e.preventDefault();\n    const newiteam=this.state.currentIteam;\n    console.log(newiteam);\n    if(newiteam!==\"\"){\n      const newIteams=[...this.state.items, newiteam];\n      this.setState({\n      items:newIteams,\n      currentIteam:{\n        text:'',\n        key:''\n      }\n    })\n    }\n  }\n  DeleteItems(key){\n    const fliterItems = this.state.items.filter(two =>two.key!==key);\n    console.log(fliterItems);\n    this.setState({items:fliterItems})\n  }\n  setUpdate(text,key){\n    const items=this.state.items;\n    items.map(item=>{\n    if (item.key===key){\n      item.text=text;\n      }\n    })\n    this.setState({\n      items:items\n    })\n  }\n  render() {\n    return(\n      <div className=\"first-todo\">\n          <div className=\"second-input\">\n              <header >\n              <p style={{color:'red',fontSize:18 ,fontFamily:\"arial\",textAlign:\"center\"}}>Hello all...</p>\n              <p><marquee scrollamount=\"7\"\n                        direction=\"left\"\n                        behavior=\"scroll\"\n                        >\n                  This is like a your note pad.. you can write whatever you want and edit and delete your text..\n                  <br />\n                  </marquee>\n                  Here is text box... you can type whatever you want and click upload button..\n                </p>\n                \n                  <form onSubmit={this.AddIteam} style={{display:\"flex\",flexWrap:\" no wrap\"}}>\n                      <textarea type=\"text\" className=\"todo-input\" placeholder=\"Enter your text\" value={this.state.currentIteam.text} onChange={this.handleInput} />\n                      <Button variant=\"contained\" color=\"secondary\"  onClick={this.AddIteam} style={{height:50,marginTop:50}}>upload your text</Button>\n                  </form>\n              </header>\n              <Listiteams items={this.state.items} DeleteItems = {this.DeleteItems} setUpdate={this.setUpdate}/>\n          </div>\n\n      </div>\n    )\n  }\n}\n\n\n\nfunction Listiteams(props){\n        const items = props.items;\n        const listData = items.map(one =>{\n          return <div className=\"list-input\" key={one.key}>\n            <p style={{boxShadow: \"2px 2px 2px 2px darkgrey\"}}>\n              <textarea type=\"text\"\n               placeholder=\"here you can edit also\" \n               id={one.key} value={one.text} \n               onChange={(e)=>{props.setUpdate(e.target.value , one.key)}} \n               style={{fontSize:\"20px\",border:\"0px\"}}/>\n            <DeleteIcon fontSize=\"large\"  onClick={()=>{props.DeleteItems(one.key)}} style={{marginLeft:100}} />\n            </p>  \n            </div>\n        })\n        return(<div>\n          <FlipMove duration={700} easing=\"ease-in-out\">\n          {listData}\n          </FlipMove>\n          </div>)\n}\n\nexport {Todo};\n\n\n\n","import React from 'react';\nimport {Component} from \"react\";\nimport './App.css';\nimport { Todo } from './components/Todo';\n\n\nclass App extends Component {\n  render(){\n  return (\n    <div className=\"App\">\n    <Todo />\n    </div>\n\n    );\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nexport {App};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root3'));\n\n\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\n\n\n"],"sourceRoot":""}